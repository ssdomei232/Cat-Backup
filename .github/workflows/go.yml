name: Build and Upload to WebDAV

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'  # 触发条件：当推送的标签以 'v' 开头时（例如 v1.0.0）

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # 指定 Go 版本

      - name: Build
        id: build_step
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="catbackup-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            output_name="$output_name.exe"
          fi
          go build -o $output_name .
          # 确保文件生成成功
          ls -l $output_name

      - name: Install rclone
        run: |
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.deb
          sudo dpkg -i rclone-current-linux-amd64.deb

      - name: Configure rclone
        run: |
          mkdir -p ~/.config/rclone
          echo "[webdav]
          type = webdav
          url = ${{ secrets.WEBDAV_URL }}
          vendor = other
          user = ${{ secrets.WEBDAV_USERNAME }}
          pass = ${{ secrets.WEBDAV_PASSWORD }}" > ~/.config/rclone/rclone.conf

      - name: Upload to WebDAV using rclone
        run: |
          output_name="catbackup-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            output_name="$output_name.exe"
          fi
          rclone copy $output_name webdav:/path/to/upload/