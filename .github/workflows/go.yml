name: Release Go Application

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'  # 触发条件：当推送的标签以 'v' 开头时（例如 v1.0.0）

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    outputs:
      build_matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # 指定 Go 版本

      - name: Build
        id: build_step
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="myapp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            output_name="$output_name.exe"
          fi
          go build -o $output_name .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: myapp-${{ matrix.goos }}-${{ matrix.goarch }}*

      - name: Set matrix output
        id: set_matrix
        run: |
          # 将矩阵转换为 JSON 字符串
          matrix_json=$(echo '${{ toJson(matrix) }}' | tr -d '\n' | sed 's/  / /g')
          # 输出到 GITHUB_OUTPUT
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ fromJson(needs.build.outputs.build_matrix).goos }}-${{ fromJson(needs.build.outputs.build_matrix).goarch }}/myapp-${{ fromJson(needs.build.outputs.build_matrix).goos }}-${{ fromJson(needs.build.outputs.build_matrix).goarch }}*
          asset_name: myapp-${{ fromJson(needs.build.outputs.build_matrix).goos }}-${{ fromJson(needs.build.outputs.build_matrix).goarch }}*
          asset_content_type: application/octet-stream